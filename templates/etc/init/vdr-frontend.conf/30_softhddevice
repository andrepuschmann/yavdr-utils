<?cs if:(vdr.frontend == "softhddevice") ?>

end script

script

python - <<END

import sys, os, subprocess, gobject, dbus, socket, string, datetime

bus = dbus.SystemBus()

def sendremote(key):
    dbusremote = bus.get_object("de.tvdr.vdr","/Remote")
    answer, message = dbusremote.HitKey(dbus.String(key),dbus_interface='de.tvdr.vdr.remote')
    if answer == 250:
        return True
    else:
        return False

def manualstart():
    dbusshutdown = bus.get_object("de.tvdr.vdr","/Shutdown")
    return dbusshutdown.ManualStart(dbus_interface='de.tvdr.vdr.shutdown')

def setUserInactive():
    dbusshutdown = bus.get_object("de.tvdr.vdr","/Shutdown")
    return dbusshutdown.SetUserInactive(dbus_interface='de.tvdr.vdr.shutdown')
    return False


def vdrsetupget(option):
    dbussetup = bus.get_object("de.tvdr.vdr","/Setup")
    value, default, answer = dbussetup(dbus.String(option),dbus_interface='de.tvdr.vdr.setup')
    return value

def get_status():
    dbusfstatus =  bus.get_object("de.tvdr.vdr","/Plugins/softhddevice")
    code, mode = dbusfstatus.SVDRPCommand(dbus.String("STAT"),dbus.String(None),dbus_interface='de.tvdr.vdr.plugin')
    return mode.split()[-1]

def frontend(command,value=None):
    dbusdetach = bus.get_object("de.tvdr.vdr","/Plugins/softhddevice")
    reply, answer = dbusdetach.SVDRPCommand(dbus.String(command),dbus.String(value),dbus_interface='de.tvdr.vdr.plugin')
    dbusremote = bus.get_object("de.tvdr.vdr","/Remote")
    if command == "DETA":
        answer, message =  dbusremote.Disable(dbus_interface='de.tvdr.vdr.remote')
    if command == "ATTA":
        answer, message =  dbusremote.Enable(dbus_interface='de.tvdr.vdr.remote')

class Settings():
    def __init__(self):
        self.frontend_active = 0
        self.logo_detached = "/usr/share/yavdr/images/yaVDR_background_detached.jpg"
        self.env = os.environ
        self.timer = None
        self.updateDisplay()
        self.manualstart = manualstart()
        try:
            self.acpi_wakeup = self.check_acpi()
        except:
            self.acpi_wakeup = None
            print "error reading /var/cache/vdr/acpiwakeup.time.old"
        
    def updateDisplay(self):
        self.env["DISPLAY"] = <?cs alt:desktop_display ?>":1"<?cs /alt ?>+self.getTempDisplay()
        
    def getTempDisplay(self):
        return subprocess.check_output(["dbget","vdr.tempdisplay"])
        
    def check_acpi(self):
        timestr = open('/var/cache/vdr/acpiwakeup.time.old','r').read().splitlines()[0]
        wakeup = datetime.datetime.strptime(timestr, "%Y-%m-%d %H:%M:%S")
        now = datetime.datetime.utcnow()
        print u"acip-wakeup.time.old hatte Wert: %s"%(wakeup.ctime())
        print u"vergleiche mit jetzt: %s"%(now.ctime())
        if wakeup < now:
            d = now - wakeup
        else:
            d = wakeup - now
        if d.seconds > 360:
            print "assuming manual start"
            return False
        else:
            print "assuming start for acpi-wakeup"
            return True

def detach():
    frontend("DETA")
    return True

def send_shutdown():
    dbusremote = bus.get_object("de.tvdr.vdr","/Remote")
    answer, message =  dbusremote.Enable(dbus_interface='de.tvdr.vdr.remote')
    sendremote("POWER")
    answer, message =  dbusremote.Disable(dbus_interface='de.tvdr.vdr.remote')
    return True

def soft_detach():
    frontend("DETA")
    #setUserInactive()
    dbusremote = bus.get_object("de.tvdr.vdr","/Remote")
    answer, message =  dbusremote.Enable(dbus_interface='de.tvdr.vdr.remote')
    sendremote("POWER")
    answer, message =  dbusremote.Disable(dbus_interface='de.tvdr.vdr.remote')
    settings.timer = gobject.timeout_add(300000,send_shutdown)
    return False


def resume(status):
    #subprocess.Popen(["/usr/bin/feh","-d","--bg-center",settings.logo_attached], env=settings.env)
    if status == "SUSPENDED":
        frontend("RESU")
    elif status == "SUSPEND_DETACHED":
        frontend("ATTA","-d %s"%(settings.env["DISPLAY"]))

def handler(sock, *args):
    buf = sock.recv(1024)
    lines = string.split(buf, "\n")
    for line in lines[:-1]:
        try:
             gobject.source_remove(settings.timer)
             #print "removed timer"
        except: pass
        code,count,cmd,device = string.split(line, " ")
        if cmd == "KEY_PROG1":
            if get_status() == "NOT_SUSPENDED":
                detach()
                settings.frontend_active = 0
            else:
                resume(status)
        elif cmd == "KEY_POWER2":
            if get_status() == "NOT_SUSPENDED":
                settings.timer = gobject.timeout_add(15000,soft_detach)
                settings.frontend_active = 0
            else:
                sendremote("POWER")                
        else:
            if settings.frontend_active == 0:
                resume(get_status())
                settings.frontend_active = 1
            else:
                pass
    return True

settings = Settings()
subprocess.Popen(["/usr/bin/feh","-d","--bg-scale",settings.logo_detached], env=settings.env)
if settings.manualstart == True and settings.acpi_wakeup != True:
    resume(get_status())
else:
    if settings.acpi_wakeup == True:
        interval, default, answer = vdrsetupget("MinEventTimeout")
        interval_ms = interval  * 60000 # * 60s * 1000ms
        settings.timer = gobject.timeout_add(interval_ms, setUserInactive)
    remote.Disable()

def connect_eventlircd():
    socket_path = "/var/run/lirc/lircd"
    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    sock.connect(socket_path)
    gobject.io_add_watch(sock, gobject.IO_IN, handler)

def try_connection():
  try:
    connect_eventlircd()
  except:
    print "Error: could not connect to eventlircd"
    try_connection()

try_connection()
gobject.MainLoop().run()
END

end script

post-stop script
export export DISPLAY=:1`dbget vdr.tempdisplay`
/usr/bin/feh -d --bg-center "/usr/share/yavdr/images/yavdr_logo.png"
if [ "$(vdr-dbus-send /Plugins/softhddevice plugin.SVDRPCommand string:"STAT" | grep -q "SUSPEND_NORMAL")" ]; then 
    vdr-dbus-send /Plugins/softhddevice plugin.SVDRPCommand string:'RESU' ||: &> /dev/null
fi
vdr-dbus-send /Plugins/softhddevice plugin.SVDRPCommand string:'DETA' ||: &> /dev/null
end script
<?cs /if ?>

<?cs /if ?>
